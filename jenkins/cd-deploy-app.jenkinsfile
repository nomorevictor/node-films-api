#!groovy
pipeline {
    agent any
    options {
        skipDefaultCheckout true
    }
    environment {
        BUILD_VERSION = "build.${currentBuild.number}"
        CLIENT_ID = credentials('anypoint.platform.clientId')
        CLIENT_SECRET = credentials('anypoint.platform.clientSecret')
    }
    parameters {
        choice( name: 'BRANCH', choices: "master\ndev", description: 'Project branch' )
        choice( name: 'ENVIRONMENT', choices: "sandbox\nproduction", description: 'Environment where API Instance will be deployed' )
    }
    stages{
        stage('Checkout Release') {
            steps {
                script {
                    def githubUrl = scm.userRemoteConfigs[0].url
                    print "GitHub URL: " + githubUrl
                    echo "Checking out Release from GitHub..."
                    checkout([$class: 'GitSCM', 
                            branches: [[name: "${params.BRANCH}"]], 
                            doGenerateSubmoduleConfigurations: false, 
                            extensions: [], 
                            submoduleCfg: [], 
                            userRemoteConfigs: [[ url: "${githubUrl}"]]])
                    }
                echo "Checkout Release completed: ${currentBuild.currentResult}"
            }
        }
        stage("Install dependencies") {
            steps {
                sh "npm install"
            }
        }
        stage('Register API Instance in Flex Gateway') {
            steps {
                script {
                    echo "Registering API Instance in Flex Gateway and Applying Policies"
                    sh """ newman run postman/FWG-Connected-Mode-CD-Newman.postman_collection.json \
                                --env-var clientId=$CLIENT_ID \
                                --env-var clientSecret=$CLIENT_SECRET \
                                --env-var url=https://devx.anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
                                --env-var anypointBaseUrl=devx \
                                --env-var environmentName="${params.ENVIRONMENT}" \
                                --env-var gatewayVersion=1.0.0 \
                                --env-var apiLabel=node-films-app-sandbox \
                                --env-var assetGroupId=973647b9-74c7-4f71-8771-1b3eae192641 \
                                --env-var assetId=node-films-app \
                                --env-var assetSemmanticVersion=1.0.0 \
                                --env-var assetVersion=v1 \
                                --env-var assetType=http-api \
                                --env-var backendServiceUri=http://host.docker.internal:3000 \
                                --env-var proxyUri=http://0.0.0.0:8081/api \
                                --env-var gatewayName=anypoint-flex-gateway \
                                --env-var gatewayVersion=1.0.0 \
                                --env-var username=us3r \
                                --env-var password=p4ssw0rd \
                                --disable-unicode \
                                --reporters cli,json \
                                --reporter-json-export promote-api-output.json """
                    echo "API Instance Registered in Flex Gateway: ${currentBuild.currentResult}"
                }
            }    
            post {
                success {
                    echo "...Registration of API Instance succeded for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Registration of API Instance failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }
        stage('Deploy to Docker Container') {
            steps {
                script {
                    echo "Deploying to Docker Container"
                    sh """docker build -t node-app-container:latest . """
                    echo "Building new Docker Image based on Dockerfile"
                    sh """docker run --name node-app-${BUILD_NUMBER} --publish 0.0.0.0:3000:3000 --detach node-app-container:latest"""
                    echo "App deployed in Docker container"
                }
            }       
            post {
                success {
                    echo "...Deploy to Docker Succeeded for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Deploy to Docker Failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }        
    }
    post {
        success {
            echo "All Good: ${env.RELEASE_VERSION}: ${currentBuild.currentResult}"    
        }
        failure {
            echo "Not So Good: ${env.RELEASE_VERSION}: ${currentBuild.currentResult}"
        }         
        always {
            echo "Pipeline result: ${currentBuild.result}"
            echo "Pipeline currentResult: ${currentBuild.currentResult}"
        }
    }
}  